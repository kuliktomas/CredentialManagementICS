<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
const int switch_number = 3;
typedef int[1, switch_number-1] switch_Id;

//user number
const int users = 2; // 3 if invalid

//switch number
const int switches = 2;

//max model time
const int MAXTIME = 16;
typedef int[0,MAXTIME] time_t;

//discrete time
time_t current_time;

//Credential
typedef struct{
    int Id;
    int pass;
}credential;
//array of credentials
typedef credential Credentials[users];

//Credential with role
typedef struct{
    int Id;
    int pass;
    int role;
}credentialRole;

//roles
const int user = 1;
const int admin = 2;

//array of credential role
typedef credentialRole CredentialRoles[users];

//token
typedef struct{
    int Id;
    int expiry_time;
    int issue_time;
    int role;
}token;

//array of active tokens
typedef token Tokens[users];
Tokens tokens;

//switch request
typedef struct{
    int Id;
    int tokenId;
}switchRequest;
//array of switch requests -&gt; requesting a credential from the keyvault
typedef switchRequest SwitchRequests[switches];
SwitchRequests switchRequests;

//switch credential
typedef struct{
    int Id;
    int val;
    int expiry_time;
}switchCredential;
//arrayOfSwitchCredentials
typedef switchCredential SwitchCredentials[switches];
//switch tickets start with -1 as identity
SwitchCredentials switchCredentials = {{-1, 0 ,0},{-1,0,0}};

//switch login request
typedef struct{
    int Id;
    int ticket_Id;
}switchLoginRequest;
//array of switch login requests -&gt; requesting a login to the switch
typedef switchLoginRequest SwitchLoginRequests[switches];
SwitchLoginRequests switchLoginRequests;

//switch session
typedef struct{
    int Id;
    int expiry_time;
}session;
//array of switch sessions
typedef session Sessions[switches];
Sessions sessions;

//monitoring of login progress to the switch
bool login_progress = false;

//system clock
clock clk;

//channels
chan Login[users];
chan AccessDenied;
chan AccessDeniedToken;
chan AccessDeniedSW;
chan ProvideToken[users];
chan SelectSwitch[switches];
chan SwitchCredential[switches];
chan SwitchLogin[switches];
chan SwitchKVValidation[switches];
chan AccessAllowed[switches];
chan SessionOpen[switches];
chan UpdateSwitch[switches];
chan UpdateACK[switches];

bool tokensExpire(){
    bool expiry = true;
    int i;
    for(i=0;i&lt;users;i++){
        if (tokens[i].expiry_time &lt;= current_time){
            expiry = expiry &amp; true;
        }else{
            expiry = expiry &amp; false;    
        }
    }
    return expiry;
}

bool ticketsExpire(){
    bool expiry = true;
    int i;
    for(i=0;i&lt;switches;i++){
        if (switchCredentials[i].expiry_time &lt;= current_time){
            expiry = expiry &amp; true;
        }else{
            expiry = expiry &amp; false;    
        }
    }
    return expiry;
}

bool sessionExpire(){
 bool expiry = true;
    int i;
    for(i=0;i&lt;switches;i++){
        if (sessions[i].expiry_time &lt;= current_time){
            expiry = expiry &amp; true;
        }else{
            expiry = expiry &amp; false;    
        }
    }
    return expiry;
}
bool token_issued;
bool ticket_issued;
bool session_issued;


bool issuedTokensExpire(){
    bool expiry = true;
    int i;
    for(i=0;i&lt;users;i++){
        if(tokens[i].expiry_time&gt;0){
            if (tokens[i].expiry_time &lt;= current_time){
                //is expired
                expiry = expiry &amp; true;
            }else{
                expiry = expiry &amp; false;    
            }  
        }
    }
    return expiry;
}

bool issuedTicketsExpire(){
    bool expiry = true;
    int i;
    for(i=0;i&lt;switches;i++){
        if(switchCredentials[i].expiry_time&gt;0 &amp;&amp; switchCredentials[i].expiry_time &lt;= MAXTIME){
            if (switchCredentials[i].expiry_time &lt;= current_time){
                expiry = expiry &amp; true;
            }else{
                expiry = expiry &amp; false;    
            }  
        }
    }
    return expiry;
}

bool issuedSessionsExpire(){
    bool expiry = true;
    int i;
    for(i=0;i&lt;switches;i++){
        if(sessions[i].expiry_time&gt;0){
            if (sessions[i].expiry_time &lt;= current_time){
                expiry = expiry &amp; true;
            }else{
                expiry = expiry &amp; false;    
            }  
        }
    }
    return expiry;
}

bool ticketsHaveUniqueIdentities(){
    int i;
    for(i = 0;i&lt;switches;i++){
        int j;
        for(j = 1;j &lt;switches;j++){
            if(switchCredentials[i].Id != -1){
                if(switchCredentials[i].Id == switchCredentials[j].Id)
                    return false;
                }
            }
    }
    return true;
}

bool canGenerateTicket(){
    int i;
    bool can = false;
    for(i=0;i&lt;users;i++){
        if(tokens[i].role == admin &amp;&amp; tokens[i].issue_time &lt;= current_time &amp;&amp; tokens[i].expiry_time &gt;= current_time){
            can = can | true;
        }else{
            can = can | false;
        }
    }
    return can;
}

//initialization
//Valid cred {{0,1},{1,2}};
Credentials credentials = {{0,1},{1,2}};

</declaration>
	<template>
		<name x="5" y="5">OT</name>
		<declaration>// Place local declarations here.
//current credential
int current_credential;
//current token
int current_token =-1;
//currently requested switch
int current_switch;
//currently owned switched credentials
int current_sw_cred = -1;
//currently open sessions switch Id
bool sessions[switches]={false, false};

//check if the system has a token
bool HasToken(){
    if(current_token != -1){
        return true;
    }
    return false;
}
//set a reuquest to get the switch ticket from the keyvault
void setSwitchRequest(int sw){
    current_switch = sw;
    switchRequests[sw].Id=sw;
    switchRequests[sw].tokenId = current_token;
    return;
}

//set a request to get the switch ticket to the switch
void setSwitchLoginRequest(){
    switchLoginRequests[current_switch].Id = current_switch;
    switchLoginRequests[current_switch].ticket_Id = current_sw_cred;
    return;
}

//checks if the OT knows of a switch session
bool hasSwitchSession(int sw){
    return sessions[sw];
}

bool hasSwitchCredential(){
    if(current_sw_cred == -1){
        return false;
    }
    return true;
}

//sets the token invalid if validation fails
void ResetToken(){
    current_token = -1;
    return;
}</declaration>
		<location id="id0" x="0" y="0">
		</location>
		<location id="id1" x="340" y="85">
			<committed/>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-195" y="-85">AccessDeniedToken?</label>
			<label kind="assignment" x="-187" y="-68">ResetToken()</label>
			<nail x="-17" y="-85"/>
			<nail x="-212" y="-85"/>
			<nail x="-212" y="-68"/>
			<nail x="-25" y="-68"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="select" x="-178" y="102">sw:int[0, switches - 1]</label>
			<label kind="synchronisation" x="-178" y="119">UpdateACK[sw]?</label>
			<nail x="0" y="119"/>
			<nail x="-212" y="119"/>
			<nail x="-212" y="144"/>
			<nail x="17" y="144"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="select" x="59" y="-93">sw:int[0, switches -1]</label>
			<label kind="guard" x="59" y="-59">hasSwitchSession(sw)</label>
			<label kind="synchronisation" x="68" y="-76">UpdateSwitch[sw]!</label>
			<nail x="34" y="-76"/>
			<nail x="255" y="-76"/>
			<nail x="255" y="-42"/>
			<nail x="42" y="-42"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="select" x="-195" y="-153">SWId:int[0,switches-1]</label>
			<label kind="synchronisation" x="-194" y="-136">SessionOpen[SWId]?</label>
			<label kind="assignment" x="-194" y="-119">sessions[SWId] = true</label>
			<nail x="0" y="-119"/>
			<nail x="-212" y="-119"/>
			<nail x="-212" y="-93"/>
			<nail x="-8" y="-93"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="guard" x="8" y="-153">hasSwitchCredential() &amp;&amp; !login_progress</label>
			<label kind="synchronisation" x="8" y="-136">SwitchLogin[current_switch]!</label>
			<label kind="assignment" x="34" y="-119">setSwitchLoginRequest()</label>
			<nail x="8" y="-119"/>
			<nail x="212" y="-119"/>
			<nail x="212" y="-102"/>
			<nail x="17" y="-102"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="select" x="-238" y="42">sw_cred_ind:int[0, switches-1]</label>
			<label kind="synchronisation" x="-238" y="59">SwitchCredential[sw_cred_ind]?</label>
			<label kind="assignment" x="-229" y="76">current_sw_cred = sw_cred_ind</label>
			<nail x="-17" y="59"/>
			<nail x="-255" y="59"/>
			<nail x="-246" y="93"/>
			<nail x="-8" y="93"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="select" x="-204" y="-25">curr_user:int[0, users-1]</label>
			<label kind="synchronisation" x="-204" y="0">ProvideToken[curr_user]?</label>
			<label kind="assignment" x="-204" y="17">current_token = curr_user</label>
			<nail x="-34" y="-8"/>
			<nail x="-212" y="-8"/>
			<nail x="-212" y="17"/>
			<nail x="-25" y="17"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-195" y="-42">AccessDenied?</label>
			<nail x="-25" y="-42"/>
			<nail x="-204" y="-42"/>
			<nail x="-204" y="-25"/>
			<nail x="-25" y="-25"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="select" x="59" y="-17">Cred:int[0, users-1]</label>
			<label kind="guard" x="76" y="-34">!HasToken()</label>
			<label kind="synchronisation" x="85" y="0">Login[Cred]!</label>
			<label kind="assignment" x="51" y="17">current_credential = Cred</label>
			<nail x="34" y="-17"/>
			<nail x="238" y="-17"/>
			<nail x="238" y="34"/>
			<nail x="51" y="34"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<nail x="340" y="136"/>
			<nail x="42" y="136"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="select" x="68" y="34">sw:int[0,switches-1]</label>
			<label kind="guard" x="59" y="68">HasToken() &amp;&amp; !hasSwitchCredential()</label>
			<label kind="synchronisation" x="85" y="85">SelectSwitch[sw]!</label>
			<label kind="assignment" x="76" y="102">setSwitchRequest(sw)</label>
			<nail x="51" y="85"/>
		</transition>
	</template>
	<template>
		<name>Keyvault</name>
		<parameter>CredentialRoles credentialRoles, int expiry_offset, int ticket_expiry_offset, bool act</parameter>
		<declaration>// Place local declarations here.
int credential_Id;
//credential guard
bool validCredential = false;
//current switch request Id
int current_sw_req;
//current switch credential
int sw_cred_ind; // index of the switch credential -&gt; use this to validate the credential once received
int sw_cred_val; //value of the switch credential
//current switch validation request
int current_val_ticket_req;

//keyvault clock
clock kv_clk;

//helper function, gets role for a credential
int getRole(){
    int i;    
    for(i=0;i&lt;users;i++){
        if(credentialRoles[i].Id == credentials[credential_Id].Id ){
            return credentialRoles[i].role;
        }
    }
    return 0;
}

//credential validation
bool ValidateCredential(){
    int i;    
    for(i=0;i&lt;users;i++){
        if(credentialRoles[i].Id == credentials[credential_Id].Id ){
            if(credentialRoles[i].pass == credentials[credential_Id].pass){
                return true;
            }
        }
    }
    return false;
}

//token creation
void CreateToken(){
    tokens[credential_Id].Id = credentials[credential_Id].Id;
    tokens[credential_Id].issue_time = current_time;
    tokens[credential_Id].expiry_time = current_time + expiry_offset;
    tokens[credential_Id].role = getRole();
    token_issued = true;
}

//token validation
bool ValidateToken(int sw){
    int tokenId = switchRequests[sw].tokenId;
    if(tokens[tokenId].expiry_time &gt; current_time &amp;&amp; tokens[tokenId].role == admin){
        return true;
    }
        return false;
}    

//Generate single use access secret for a current switch cred request
void GenerateAccessSecret(int val){
    switchCredentials[current_sw_req].val = val;
    switchCredentials[current_sw_req].expiry_time = current_time + ticket_expiry_offset;
    sw_cred_val = val;
    sw_cred_ind = current_sw_req;
    ticket_issued = true;
    return;
}

//ticket validation
bool ValidateTicket(){
    if(current_sw_req == current_val_ticket_req){
        if((switchCredentials[current_val_ticket_req].expiry_time) &gt; current_time){
            return true;
        } 
            return false;
    }
    return false;
}</declaration>
		<location id="id2" x="0" y="0">
		</location>
		<location id="id3" x="221" y="-68">
			<committed/>
		</location>
		<location id="id4" x="476" y="0">
			<label kind="invariant" x="484" y="-25">kv_clk &lt;= 1</label>
		</location>
		<location id="id5" x="221" y="76">
			<name x="187" y="34">generated</name>
		</location>
		<location id="id6" x="-255" y="-68">
		</location>
		<location id="id7" x="-510" y="-68">
			<name x="-569" y="-102">gen_ticket</name>
			<committed/>
		</location>
		<location id="id8" x="-246" y="51">
		</location>
		<init ref="id2"/>
		<transition>
			<source ref="id8"/>
			<target ref="id2"/>
			<label kind="guard" x="-204" y="144">ValidateTicket()</label>
			<label kind="synchronisation" x="-272" y="161">AccessAllowed[current_val_ticket_req]!</label>
			<label kind="assignment" x="-238" y="178">login_progress = false</label>
			<nail x="-255" y="161"/>
			<nail x="-26" y="161"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id2"/>
			<label kind="guard" x="-229" y="85">!ValidateTicket()</label>
			<label kind="synchronisation" x="-229" y="102">AccessDeniedSW!</label>
			<label kind="assignment" x="-229" y="119">login_progress = false</label>
			<nail x="-246" y="102"/>
			<nail x="-42" y="102"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id8"/>
			<label kind="select" x="-221" y="17">Id:int[0, switches -1]</label>
			<label kind="synchronisation" x="-221" y="34">SwitchKVValidation[Id]?</label>
			<label kind="assignment" x="-229" y="51">current_val_ticket_req = Id, 
login_progress = true</label>
			<nail x="-51" y="51"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id2"/>
			<label kind="guard" x="-263" y="-51">!ValidateToken(current_sw_req)</label>
			<label kind="synchronisation" x="-238" y="-34">AccessDeniedToken!</label>
			<nail x="-289" y="-34"/>
			<nail x="-51" y="-34"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-492" y="-17">SwitchCredential[sw_cred_ind]!</label>
			<nail x="-510" y="0"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="select" x="-459" y="-110">secVal:int[0,10]</label>
			<label kind="guard" x="-493" y="-85">ValidateToken(current_sw_req)</label>
			<label kind="assignment" x="-492" y="-68">GenerateAccessSecret(secVal)</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id6"/>
			<label kind="select" x="-229" y="-102">sw:int[0,switches-1]</label>
			<label kind="synchronisation" x="-212" y="-85">SelectSwitch[sw]?</label>
			<label kind="assignment" x="-221" y="-68">current_sw_req = sw</label>
			<nail x="-34" y="-68"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="8" y="59">ProvideToken[credential_Id]!</label>
			<nail x="0" y="76"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="guard" x="246" y="59">validCredential &amp;&amp; kv_clk &gt;= 1</label>
			<label kind="assignment" x="289" y="76">CreateToken()</label>
			<nail x="476" y="76"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id2"/>
			<label kind="guard" x="144" y="-17">!validCredential &amp;&amp; kv_clk &gt;=1</label>
			<label kind="synchronisation" x="187" y="0">AccessDenied!</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="assignment" x="238" y="-102">validCredential = ValidateCredential(),
kv_clk = 0</label>
			<nail x="476" y="-68"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="select" x="8" y="-102">Id:int[0, users-1]</label>
			<label kind="synchronisation" x="18" y="-85">Login[Id]?</label>
			<label kind="assignment" x="25" y="-68">credential_Id = Id</label>
			<nail x="0" y="-68"/>
		</transition>
	</template>
	<template>
		<name>Time_discretizer</name>
		<location id="id9" x="-102" y="-51">
			<label kind="invariant" x="-314" y="-85">clk &lt;= MAXTIME &amp;&amp; clk &lt;= current_time + 1</label>
		</location>
		<init ref="id9"/>
		<transition>
			<source ref="id9"/>
			<target ref="id9"/>
			<label kind="guard" x="-85" y="-68">clk &gt;= current_time + 1</label>
			<label kind="assignment" x="-84" y="-51">current_time++</label>
			<nail x="76" y="-51"/>
			<nail x="76" y="0"/>
			<nail x="-102" y="0"/>
		</transition>
	</template>
	<template>
		<name>Switch</name>
		<parameter>int Id, int expiry_offset</parameter>
		<declaration>//current session of the switch
session current_session={-1, 0};

//valid flag for the currrent session
bool session_valid = false;

//switch internal clock
clock sw_clk;

//open a session
void OpenSession(){
    current_session.Id = Id;
    current_session.expiry_time = current_time + expiry_offset;
    sessions[Id] = current_session;
    return;
}

//check the session is valid
bool ValidSession(){
    if(current_session.expiry_time &gt; current_time){
        return true;
    }
    else{
        return false;
    }
}</declaration>
		<location id="id10" x="0" y="0">
		</location>
		<location id="id11" x="289" y="-85">
			<committed/>
		</location>
		<location id="id12" x="-246" y="-76">
		</location>
		<location id="id13" x="-476" y="0">
		</location>
		<location id="id14" x="-246" y="0">
			<label kind="invariant" x="-306" y="-25">sw_clk &lt;= 1</label>
		</location>
		<location id="id15" x="289" y="17">
			<label kind="invariant" x="272" y="-17">sw_clk &lt;= 1</label>
		</location>
		<init ref="id10"/>
		<transition>
			<source ref="id15"/>
			<target ref="id10"/>
			<label kind="guard" x="51" y="127">ValidSession() &amp;&amp; sw_clk &gt;= 1</label>
			<label kind="synchronisation" x="102" y="144">UpdateACK[Id]!</label>
			<nail x="323" y="118"/>
			<nail x="323" y="144"/>
			<nail x="17" y="144"/>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id10"/>
			<label kind="guard" x="59" y="76">!ValidSession() &amp;&amp; sw_clk &gt;= 1</label>
			<label kind="synchronisation" x="93" y="93">AccessDenied!</label>
			<nail x="289" y="93"/>
			<nail x="51" y="93"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id15"/>
			<label kind="select" x="42" y="-17">curr_sw:int[0, switches - 1]</label>
			<label kind="guard" x="68" y="17">curr_sw == Id</label>
			<label kind="synchronisation" x="42" y="0">UpdateSwitch[curr_sw]?</label>
			<label kind="assignment" x="93" y="34">sw_clk = 0</label>
			<nail x="255" y="0"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="-331" y="34">SessionOpen[Id]!</label>
			<nail x="-476" y="51"/>
			<nail x="-8" y="51"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id13"/>
			<label kind="guard" x="-425" y="8">sw_clk&gt;=1</label>
			<label kind="assignment" x="-425" y="-17">OpenSession()</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id14"/>
			<label kind="select" x="-221" y="-34">curr_sw:int[0, switches-1]</label>
			<label kind="guard" x="-204" y="-17">curr_sw == Id</label>
			<label kind="synchronisation" x="-221" y="0">AccessAllowed[curr_sw]?</label>
			<label kind="assignment" x="-170" y="17">sw_clk = 0</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="-187" y="-59">AccessDenied!</label>
			<nail x="-246" y="-42"/>
			<nail x="-34" y="-42"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="-204" y="-93">AccessDeniedSW?</label>
			<nail x="-34" y="-76"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="42" y="-42">SwitchKVValidation[Id]!</label>
			<nail x="289" y="-25"/>
			<nail x="25" y="-25"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id11"/>
			<label kind="select" x="17" y="-68">current_switch:int[0, switches-1]</label>
			<label kind="guard" x="34" y="-85">current_switch == Id</label>
			<label kind="synchronisation" x="25" y="-102">SwitchLogin[current_switch]?</label>
			<nail x="0" y="-85"/>
		</transition>
	</template>
	<system>// Place template instantiations here.
ot = OT();
//Keyvault parameters
const CredentialRoles credentialRolesInit = {{0,1, user},{1,2, admin}};

kv = Keyvault(credentialRolesInit, 5, 5, true);
kv2 = Keyvault(credentialRolesInit, 3, 5, true);

//switch
sw = Switch(0, 4);
sw2 = Switch(1, 4);

//time_discretizer
td = Time_discretizer();

// List one or more processes to be composed into a system.
system ot, kv, sw, sw2, td; //add another keyvault as kv2
    </system>
	<queries>
		<query>
			<formula>A&lt;&gt;(issuedTokensExpire() &amp;&amp; issuedTicketsExpire() &amp;&amp; issuedSessionsExpire()) </formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[]ticketsHaveUniqueIdentities()</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[]kv.act==true</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[](canGenerateTicket()==false) imply !kv.gen_ticket</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] not deadlock</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
